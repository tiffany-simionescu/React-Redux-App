{"version":3,"sources":["components/FoxImage.js","actions/foxAction.js","components/DogImage.js","actions/dogAction.js","components/CatImage.js","actions/catAction.js","components/NavBar.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["connect","state","fox","error","getFoxImage","dispatch","type","axios","get","proxyurl","then","res","console","log","payload","data","image","catch","err","response","props","src","alt","className","onClick","e","preventDefault","dog","getDogImage","url","cat","getCatImage","file","NavBar","to","initialState","isFetching","store","createStore","action","applyMiddleware","thunk","logger","App","path","component","FoxImage","DogImage","CatImage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d3363af2.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport { connect } from 'react-redux';\r\n\r\n// Actions\r\nimport { getFoxImage } from '../actions';\r\n\r\nconst FoxImage = props => {\r\n\r\n  const fetchFoxImage = e => {\r\n    e.preventDefault();\r\n    props.getFoxImage();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Fox Image Generator</h1>\r\n      <div>\r\n            <img \r\n              src={props.fox}\r\n              alt=\"fox\"\r\n            />\r\n      </div>\r\n      {props.error && <p className=\"error\">{props.error}</p>}\r\n      <button onClick={fetchFoxImage}>New Fox Image</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    fox: state.fox,\r\n    error: state.error\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getFoxImage })(FoxImage);","import axios from 'axios';\r\n\r\nexport const FETCH_FOX_IMAGE_START = 'FETCH_FOX_IMAGE_START';\r\nexport const FETCH_FOX_IMAGE_SUCCESS = 'FETCH_FOX_IMAGE_SUCCESS';\r\nexport const FETCH_FOX_IMAGE_FAILURE = 'FETCH_FOX_IMAGE_FAILURE';\r\n\r\nconst proxyurl = 'https://cors-anywhere.herokuapp.com/';\r\nconst url = 'http://randomfox.ca/floof';\r\n\r\nexport const getFoxImage = () => dispatch => {\r\n    dispatch({ type: FETCH_FOX_IMAGE_START });\r\n    axios.get(proxyurl + url)\r\n      .then(res => {\r\n        console.log(res);\r\n        dispatch({ type: FETCH_FOX_IMAGE_SUCCESS, payload: res.data.image })\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        dispatch({\r\n          type: FETCH_FOX_IMAGE_FAILURE,\r\n          payload: `${err.response}`\r\n        })\r\n      })\r\n}","import React from 'react';\r\nimport '../App.css';\r\nimport { connect } from 'react-redux';\r\n\r\n// Actions\r\nimport { getDogImage } from '../actions';\r\n\r\nconst DogImage = props => {\r\n\r\n  const fetchDogImage = e => {\r\n    e.preventDefault();\r\n    props.getDogImage();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Dog Image Generator</h1>\r\n      <div>\r\n            <img \r\n              src={props.dog}\r\n              alt=\"dog\"\r\n            />\r\n      </div>\r\n      {props.error && <p className=\"error\">{props.error}</p>}\r\n      <button onClick={fetchDogImage}>New Dog Image</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    dog: state.dog,\r\n    error: state.error\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getDogImage })(DogImage);","import axios from 'axios';\r\n\r\nexport const FETCH_DOG_IMAGE_START = 'FETCH_DOG_IMAGE_START';\r\nexport const FETCH_DOG_IMAGE_SUCCESS = 'FETCH_DOG_IMAGE_SUCCESS';\r\nexport const FETCH_DOG_IMAGE_FAILURE = 'FETCH_DOG_IMAGE_FAILURE';\r\n\r\nconst url = 'https://random.dog/woof.json';\r\n\r\nexport const getDogImage = () => dispatch => {\r\n  dispatch({ type: FETCH_DOG_IMAGE_START });\r\n  axios.get(url)\r\n    .then(res => {\r\n      console.log(res);\r\n      dispatch({ type: FETCH_DOG_IMAGE_SUCCESS, payload: res.data.url })\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n      dispatch({\r\n        type: FETCH_DOG_IMAGE_FAILURE,\r\n        payload: `${err.response}`\r\n      })\r\n    })\r\n}","import React from 'react';\r\nimport '../App.css';\r\nimport { connect } from 'react-redux';\r\n\r\n// Actions\r\nimport { getCatImage } from '../actions/';\r\n\r\nconst CatImage = props => {\r\n\r\n  const fetchCatImage = e => {\r\n    e.preventDefault();\r\n    props.getCatImage();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Cat Image Generator</h1>\r\n      <div>\r\n            <img \r\n              src={props.cat}\r\n              alt=\"cat\"\r\n            />\r\n      </div>\r\n      {props.error && <p className=\"error\">{props.error}</p>}\r\n      <button onClick={fetchCatImage}>New Cat Image</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    cat: state.cat,\r\n    error: state.error\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getCatImage })(CatImage);","import axios from 'axios';\r\n\r\nexport const FETCH_CAT_IMAGE_START = 'FETCH_CAT_IMAGE_START';\r\nexport const FETCH_CAT_IMAGE_SUCCESS = 'FETCH_CAT_IMAGE_SUCCESS';\r\nexport const FETCH_CAT_IMAGE_FAILURE = 'FETCH_CAT_IMAGE_FAILURE';\r\n\r\nconst url = 'https://aws.random.cat/meow';\r\n\r\nexport const getCatImage = () => dispatch => {\r\n  dispatch({ type: FETCH_CAT_IMAGE_START });\r\n  axios.get(url)\r\n    .then(res => {\r\n      console.log(res);\r\n      dispatch({ type: FETCH_CAT_IMAGE_SUCCESS, payload: res.data.file })\r\n    })\r\n    .catch(err => {\r\n      console.log(err);\r\n      dispatch({\r\n        type: FETCH_CAT_IMAGE_FAILURE,\r\n        payload: `${err.response}`\r\n      })\r\n    })\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div className=\"nav-container\">\r\n      <Link to=\"/fox-image\" className=\"link\">Fox</Link>\r\n      <Link to=\"/dog-image\" className=\"link\">Dog</Link>\r\n      <Link to=\"/cat-image\" className=\"link\">Cat</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar;","import { \r\n  FETCH_FOX_IMAGE_START, \r\n  FETCH_FOX_IMAGE_SUCCESS, \r\n  FETCH_FOX_IMAGE_FAILURE, \r\n  FETCH_DOG_IMAGE_START, \r\n  FETCH_DOG_IMAGE_SUCCESS, \r\n  FETCH_DOG_IMAGE_FAILURE, \r\n  FETCH_CAT_IMAGE_START, \r\n  FETCH_CAT_IMAGE_SUCCESS, \r\n  FETCH_CAT_IMAGE_FAILURE, \r\n} from '../actions';\r\n\r\nconst initialState = {\r\n  fox: 'http://randomfox.ca/images/68.jpg',\r\n  dog: 'https://random.dog/aa8e5e24-5c58-4963-9809-10f4aa695cfc.jpg',\r\n  cat: 'https:\\/\\/purr.objects-us-east-1.dream.io\\/i\\/030_-_VNZ6Gt8.gif',\r\n  error: '',\r\n  isFetching: false\r\n};\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case FETCH_FOX_IMAGE_START:\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        isFetching: true\r\n      }\r\n    case FETCH_FOX_IMAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        fox: action.payload,\r\n        error: '',\r\n        isFetching: false\r\n      }\r\n    case FETCH_FOX_IMAGE_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isFetching: false\r\n      }\r\n    case FETCH_DOG_IMAGE_START:\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        isFetching: true\r\n      }\r\n    case FETCH_DOG_IMAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        dog: action.payload,\r\n        error: '',\r\n        isFetching: false\r\n      }\r\n    case FETCH_DOG_IMAGE_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isFetching: false\r\n      }\r\n    case FETCH_CAT_IMAGE_START:\r\n      return {\r\n        ...state,\r\n        error: '',\r\n        isFetching: true\r\n      }\r\n    case FETCH_CAT_IMAGE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        cat: action.payload,\r\n        error: '',\r\n        isFetching: false\r\n      }\r\n    case FETCH_CAT_IMAGE_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        isFetching: false\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { Route } from 'react-router-dom';\n\n// Components\nimport FoxImage from './components/FoxImage';\nimport DogImage from './components/DogImage';\nimport CatImage from './components/CatImage';\nimport NavBar from './components/NavBar';\n\n// Reducers\nimport { reducer } from './reducers';\n\n// MiddleWare\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\n// Redux Store\nimport { createStore, applyMiddleware } from 'redux';\n\n// const rootReducer = combineReducers({\n//   FoxImage: foxReducer, \n//   CatImage: catReducer, \n//   DogImage: dogReducer\n// })\n\nexport const store = createStore(reducer, applyMiddleware(thunk, logger));\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavBar />\n        <Route path=\"/fox-image\" component={FoxImage} />\n        <Route path=\"/dog-image\" component={DogImage} />\n        <Route path=\"/cat-image\" component={CatImage} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App, { store } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}